from scipy.integrate import solve_ivp
import numpy as np
import matplotlib.pyplot as plt


class Car:

    # Declare car parameters from question
    def __init__(self,
                 length=2.3,
                 velocity=5,
                 x_position=0.,
                 y_position=0.3,
                 pose=np.deg2rad(5)):   # pose of 5 deg. -> rads.
        self.__length = length
        self. __velocity = velocity
        self.__x_position = x_position
        self.__y_position = y_position
        self.__pose_initial = pose

    # State parameters needed for move function of the car
    def move(self, steering_angle, offset, dt):

        # STEP 1: define the system dynamics
        def system_dynamics(_t,z):  # Defines the system dynamics given in eqns. 3.11a-c

            theta = z[2]    # theta is 3rd part of f(x,y,theta), therefore use part 2 from array (starts at 0)
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle + offset) / self.__length]  # offset added to eqn.

        # STEP 2: define the initial condition z(0)
        z_initial = [self.__x_position,
                     self.__y_position,
                     self.__pose_initial]

        # STEP 3: Call solve_ivp to solve IDE system
        __num_points = 1000     # resolution
        solution = solve_ivp(system_dynamics,
                             [0, dt],
                             z_initial,
                             t_eval=np.linspace(0, dt, __num_points))

        self.__x_position = solution.y[0][-1]       # [-1] represents last element in the array
        self.__y_position = solution.y[1][-1]
        self.__pose_initial = solution.y[2][-1]

    # Allow a way to access solutions
    def x(self):
        return self.__x_position

    def y(self):
        return self.__y_position

    def theta(self):
        return self.__pose_initial


class PdController:

    # State parameters needed for PID controller to operate
    def __init__(self, kp, kd, ts):
        self.__kp = kp
        self.__kd = kd / ts
        self.__ts = ts
        self.__previous_error = None
        self.__sum_errors = 0.0

    def control(self, y, set_point=0):  # y is distance from middle of lane (above = +ve)
        error = set_point - y           # calculate error
        u = self.__kp * error

        # If there was a previous error, implement D function of PD controller
        if self.__previous_error is not None:
            u += self.__kd * (error - self.__previous_error)    # += means add onto previous value of u

        self.__previous_error = error   # save it for later

        return u


# Create a new car
percy = Car(y_position=0.5)

# Declare appropriate variables
__samp_rate = 40                    # From question ~ sampling rate  = 40Hz
t_sampling = 1 / __samp_rate        # Calculate interval between samples
time_max = 50                       # From question ~ sample for 50s
__t_range = __samp_rate * time_max  # Calculate total sample points range

# Create a new P controller
pid1 = PdController(0.2, 0.1, t_sampling)

# Create array to store different values
y_cache_1 = np.array([percy.y()])
x_cache_1 = np.array([percy.x()])

# Use PD controller to determine steering angle
for t in range(__t_range):
    steering_angle_1 = pid1.control(percy.y())

    # Call the Car.move function
    # Use determined steering angle, offset of 1deg., & sampling interval dt
    percy.move(steering_angle_1, np.deg2rad(1), t_sampling)

    # 'Stack' occurring values in x/y cache array
    y_cache_1 = np.vstack((y_cache_1, [percy.y()]))
    x_cache_1 = np.vstack((x_cache_1, [percy.x()]))


# Repeat the above steps for 2 other cars in order to plot several K_d values

toby = Car(y_position=0.5)
pid2 = PdController(0.2, 0.5, t_sampling)
y_cache_2 = np.array([toby.y()])
x_cache_2 = np.array([toby.x()])
for t in range(__t_range):
    steering_angle_2 = pid2.control(toby.y())
    toby.move(steering_angle_2, np.deg2rad(1), t_sampling)
    y_cache_2 = np.vstack((y_cache_2, [toby.y()]))
    x_cache_2 = np.vstack((x_cache_2, [toby.x()]))


ronald = Car(y_position=0.5)     # 40hz
pid3 = PdController(0.2, 0.9, t_sampling)
y_cache_3 = np.array([ronald.y()])
x_cache_3 = np.array([ronald.x()])
for t in range(__t_range):
    steering_angle_3 = pid3.control(ronald.y())
    ronald.move(steering_angle_3, np.deg2rad(1), t_sampling)
    y_cache_3 = np.vstack((y_cache_3, [ronald.y()]))
    x_cache_3 = np.vstack((x_cache_3, [ronald.x()]))

# Plot x cache vs y cache of different K_d values for x-y trajectory
plt.plot(x_cache_1, y_cache_1, label = "K$_d$ = 0.2")
plt.plot(x_cache_2, y_cache_2, label = "K$_d$ = 0.5")
plt.plot(x_cache_3, y_cache_3, label = "K$_d$ = 0.9")

plt.grid()
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.legend()        # shows labels as a legend
plt.show()

